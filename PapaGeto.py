import requests
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from aiogram.utils import executor


API_TOKEN = "5986284630:AAEiE94AobDfjD1URjJK1S4nu2D3t9LEFH0"
WEATHER_API_KEY = "4e481ce0f4dc1225357d2dcc6f1637ac"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    await message.answer_sticker(sticker="CAACAgIAAxkBAAEI23dkU9W4PP-qVYCcAhFeqb4JVC3SgwACdCMAAkKGCEjJCqwmgfyNxS8E")
    await message.answer(text="–ü—Ä–∏–≤—ñ—Ç. –Ø –±–æ—Ç, —è–∫–∏–π –ø–æ–∫–∞–∑—É—î –ø–æ–≥–æ–¥—É. –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, —ñ —è —Å–∫–∞–∂—É –≤–∞–º –ø–æ–≥–æ–¥—É —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–µ—ó.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("Started")

@dp.message_handler(state=["Started"])
async def get_weather(message: types.Message):

    code_to_smile = {
        "—è—Å–Ω–æ": "–Ø—Å–Ω–æ \U00002600",
        "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å ‚õÖ",
        "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å ‚õÖ",
        "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å ‚õÖ",
        "–ø–∞—Å–º—É—Ä–Ω–æ": "–•–º–∞—Ä–Ω–æ ‚òÅÔ∏è",
        "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "–ó–ª–∏–≤–∞ \U00002614",
        "–¥–æ–∂–¥—å": "–ó–ª–∏–≤–∞ \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω—ñ–≥ \U0001F328",
        "–ø–ª–æ—Ç–Ω—ã–π —Ç—É–º–∞–Ω": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        city = message.text
        url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru'
        response = requests.get(url)
        data = response.json()
        print(data)
        weather_discription = data["weather"][0]["description"]
        if weather_discription in code_to_smile:
            wd = code_to_smile[weather_discription]
        else:
            wd = "ü•∂–ü–æ–¥–∏–≤–∏—Å—å —É –≤—ñ–∫–Ω–æ, –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ —Ç–∞–ºü•∂"
        temp = data['main']['temp']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        feels_like = data['main']['feels_like']
        sunrise = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset = datetime.datetime.fromtimestamp(data['sys']['sunset'])

        await message.reply(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É –º—ñ—Å—Ç—ñ: {city} –∑–∞—Ä–∞–∑: {temp}¬∞C\n'
                            f'–û–ø–∏—Å: {wd}\n'
                            f'–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è: {feels_like}¬∞C\n'
                            f'–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n'
                            f'–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise}\n'
                            f'–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset}\n'
                            f'–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä–∞: {wind_speed} –º/—Å\n'
                            f'–Ø–∫–µ –º—ñ—Å—Ç–æ —â–µ –±—É–¥–µ–º–æ –¥–∏–≤–∏—Ç–∏—Å—å?', parse_mode=ParseMode.HTML)


    except Exception as e:
        print(e)
        await message.reply('ü•∂–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.ü•∂')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)